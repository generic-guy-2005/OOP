/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Praktikum_12_06_2025;

import javax.swing.JOptionPane;

/**
 *
 * @author acer
 */
public class LoopPatern extends javax.swing.JFrame {

    /**
     * Creates new form LoopPatern
     */
    public LoopPatern() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patternLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        aTextF = new javax.swing.JTextField();
        bTextF = new javax.swing.JTextField();
        doneButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        typeComb = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        outTextA = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        patternLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        patternLabel.setText("Pattern");

        jLabel1.setText("Number A");

        jLabel2.setText("Number B");

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Type");

        typeComb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Pattern", "Rectangle", "Triangle", "Upside-Down Triangle", "Left Triangle", "Right Triangle", "Diamond", "Forbidden" }));

        outTextA.setColumns(20);
        outTextA.setRows(5);
        jScrollPane1.setViewportView(outTextA);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(patternLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bTextF)
                                    .addComponent(typeComb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(aTextF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(doneButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(patternLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(aTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doneButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(typeComb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        try {
            int a = Integer.parseInt(aTextF.getText());
            int b = Integer.parseInt(bTextF.getText());
            int opt = (int) typeComb.getSelectedIndex();

            StringBuilder pattern = new StringBuilder("Output:\n\n");
            switch(opt){
                case 1:
                    int i, j;
                    for(i = 0; i < a; i++){
                        for(j = 0; j < b; j++){
                            pattern.append(" * ");
                        }
                        pattern.append("\n");
                    }
                case 2:
                    int k;
                    for(i = 0; i < a; i++){
                        for(j = i; j < a; j++){
                            pattern.append(" ");
                        }
                        for(k = 0; k <= i; k++){
                            pattern.append(" *");
                        }
                        pattern.append("\n");
                    }
                case 3:
                    for(i = 0; i < a; i++){
                        for(j = 0; j <= i; j++){
                            pattern.append(" ");
                        }

                        for(k = i; k < a; k++){
                            pattern.append(" *");
                        }
                        pattern.append("\n");
                    }
                case 4:
                    for(i = 0; i < a; i++){
                        for(j = 0; j <= i; j++){
                            pattern.append("* ");
                        }
                        pattern.append("\n");
                    }
                case 5:
                    for(i = 0; i < a; i++){
                        for(j = 0; j <= i; j++){
                            pattern.append("   ");
                        }
                        for(j = i; j < a; j++){
                            pattern.append("* ");
                        }
                        pattern.append("\n");
                    }
                case 6:
                    for(i = 0; i < a; i++){
                        for(j = i; j < a; j++){
                            pattern.append(" ");
                        }
                        for(k = 0; k <= i; k++){
                            pattern.append(" *");
                        }
                        pattern.append("\n");
                    }
                    
                    for(i = 1; i < a; i++){
                        for(j = 0; j <= i; j++){
                            pattern.append(" ");
                        }

                        for(k = i; k < a; k++){
                            pattern.append(" *");
                        }
                        pattern.append("\n");
                    }
                case 7:
                    int early, mid, late;
                    early = 0;
                    mid = a / 2;
                    late = a;
                    for(i = 0; i < a; i++){
                        if(i == early){
                            for(j = 0; j < late; j++){
                                if(j <= mid){
                                    pattern.append(" *");
                                }
                                else if(j == late - 1){
                                    pattern.append(" *");
                                }
                                else{
                                    pattern.append("  ");
                                }
                            }
                        }
                        else if(i < mid){
                            for(j = 0; j < late; j++){
                                if(j == mid){
                                    pattern.append(" *");
                                }
                                else if(j == late - 1){
                                    pattern.append(" *");
                                }
                                else{
                                    pattern.append("  ");
                                }
                            }
                        }
                        else if(i == mid){
                            for(j = 0; j < late; j++){
                                pattern.append(" *");
                            }
                        }
                        else if(i > mid && i < late - 1){
                            for(j = 0; j < late; j++){
                                if(j == early){
                                    pattern.append(" *");
                                }
                                else if(j == mid){
                                    pattern.append(" *");
                                }
                                else{
                                    pattern.append("  ");
                                }
                            }
                        }
                        else if(i == late - 1){
                            for(j = 0; j < late; j++){
                                if(j == early){
                                    pattern.append(" *");
                                }
                                else if(j >= mid){
                                    pattern.append(" *");
                                }
                                else{
                                    pattern.append("  ");
                                }
                            }
                        }
                        pattern.append("\n");
                    }
            }
            outTextA.setText(pattern.toString());
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid Input", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
        finally {
            JOptionPane.showMessageDialog(this, "Done", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_doneButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoopPatern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoopPatern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoopPatern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoopPatern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoopPatern().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aTextF;
    private javax.swing.JTextField bTextF;
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outTextA;
    private javax.swing.JLabel patternLabel;
    private javax.swing.JComboBox<String> typeComb;
    // End of variables declaration//GEN-END:variables
}
